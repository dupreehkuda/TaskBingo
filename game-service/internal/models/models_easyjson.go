// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	websocket "github.com/gorilla/websocket"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	sync "sync"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Users, 0, 1)
			} else {
				*out = Users{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 User
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels(out *jwriter.Writer, in Users) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels1(in *jlexer.Lexer, out *UserAccountInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "city":
			out.City = string(in.String())
		case "wins":
			out.Wins = int(in.Int())
		case "lose":
			out.Lose = int(in.Int())
		case "bingo":
			out.Bingo = int(in.Int())
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]FriendsInfo, 0, 0)
					} else {
						out.Friends = []FriendsInfo{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v4 FriendsInfo
					(v4).UnmarshalEasyJSON(in)
					out.Friends = append(out.Friends, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likedPacks":
			if in.IsNull() {
				in.Skip()
				out.LikedPacks = nil
			} else {
				in.Delim('[')
				if out.LikedPacks == nil {
					if !in.IsDelim(']') {
						out.LikedPacks = make([]TaskPack, 0, 1)
					} else {
						out.LikedPacks = []TaskPack{}
					}
				} else {
					out.LikedPacks = (out.LikedPacks)[:0]
				}
				for !in.IsDelim(']') {
					var v5 TaskPack
					(v5).UnmarshalEasyJSON(in)
					out.LikedPacks = append(out.LikedPacks, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ratedPacks":
			if in.IsNull() {
				in.Skip()
				out.RatedPacks = nil
			} else {
				in.Delim('[')
				if out.RatedPacks == nil {
					if !in.IsDelim(']') {
						out.RatedPacks = make([]string, 0, 4)
					} else {
						out.RatedPacks = []string{}
					}
				} else {
					out.RatedPacks = (out.RatedPacks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.RatedPacks = append(out.RatedPacks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "games":
			if in.IsNull() {
				in.Skip()
				out.Games = nil
			} else {
				in.Delim('[')
				if out.Games == nil {
					if !in.IsDelim(']') {
						out.Games = make([]GameShort, 0, 0)
					} else {
						out.Games = []GameShort{}
					}
				} else {
					out.Games = (out.Games)[:0]
				}
				for !in.IsDelim(']') {
					var v7 GameShort
					(v7).UnmarshalEasyJSON(in)
					out.Games = append(out.Games, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels1(out *jwriter.Writer, in UserAccountInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"wins\":"
		out.RawString(prefix)
		out.Int(int(in.Wins))
	}
	{
		const prefix string = ",\"lose\":"
		out.RawString(prefix)
		out.Int(int(in.Lose))
	}
	{
		const prefix string = ",\"bingo\":"
		out.RawString(prefix)
		out.Int(int(in.Bingo))
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Friends {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likedPacks\":"
		out.RawString(prefix)
		if in.LikedPacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.LikedPacks {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ratedPacks\":"
		out.RawString(prefix)
		if in.RatedPacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.RatedPacks {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"games\":"
		out.RawString(prefix)
		if in.Games == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Games {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAccountInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAccountInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "city":
			out.City = string(in.String())
		case "bingo":
			out.Bingo = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"bingo\":"
		out.RawString(prefix)
		out.Int(int(in.Bingo))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels3(in *jlexer.Lexer, out *TaskPackRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.TaskID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels3(out *jwriter.Writer, in TaskPackRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskPackRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskPackRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels4(in *jlexer.Lexer, out *TaskPack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "pack":
			(out.Pack).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels4(out *jwriter.Writer, in TaskPack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"pack\":"
		out.RawString(prefix)
		(in.Pack).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskPack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskPack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels5(in *jlexer.Lexer, out *StatusGameRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gameID":
			out.GameID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels5(out *jwriter.Writer, in StatusGameRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gameID\":"
		out.RawString(prefix[1:])
		out.String(string(in.GameID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusGameRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusGameRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels6(in *jlexer.Lexer, out *Room) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "Game":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				if out.Game == nil {
					out.Game = new(Game)
				}
				(*out.Game).UnmarshalEasyJSON(in)
			}
		case "player1":
			if in.IsNull() {
				in.Skip()
				out.Player1 = nil
			} else {
				if out.Player1 == nil {
					out.Player1 = new(Player)
				}
				(*out.Player1).UnmarshalEasyJSON(in)
			}
		case "player2":
			if in.IsNull() {
				in.Skip()
				out.Player2 = nil
			} else {
				if out.Player2 == nil {
					out.Player2 = new(Player)
				}
				(*out.Player2).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels6(out *jwriter.Writer, in Room) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Game\":"
		out.RawString(prefix)
		if in.Game == nil {
			out.RawString("null")
		} else {
			(*in.Game).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"player1\":"
		out.RawString(prefix)
		if in.Player1 == nil {
			out.RawString("null")
		} else {
			(*in.Player1).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"player2\":"
		out.RawString(prefix)
		if in.Player2 == nil {
			out.RawString("null")
		} else {
			(*in.Player2).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Room) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Room) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels7(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "points":
			out.Points = int(in.Int())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels7(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		out.Int(int(in.Points))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels8(in *jlexer.Lexer, out *RegisterCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "city":
			out.City = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels8(out *jwriter.Writer, in RegisterCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels9(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "Conn":
			if in.IsNull() {
				in.Skip()
				out.Conn = nil
			} else {
				if out.Conn == nil {
					out.Conn = new(websocket.Conn)
				}
				easyjsonD2b7633eDecodeGithubComGorillaWebsocket(in, out.Conn)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels9(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Conn\":"
		out.RawString(prefix)
		if in.Conn == nil {
			out.RawString("null")
		} else {
			easyjsonD2b7633eEncodeGithubComGorillaWebsocket(out, *in.Conn)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComGorillaWebsocket(in *jlexer.Lexer, out *websocket.Conn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGorillaWebsocket(out *jwriter.Writer, in websocket.Conn) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels10(in *jlexer.Lexer, out *Packs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Packs, 0, 1)
			} else {
				*out = Packs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 TaskPack
			(v16).UnmarshalEasyJSON(in)
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels10(out *jwriter.Writer, in Packs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Packs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Packs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels11(in *jlexer.Lexer, out *Pack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]string, 0, 4)
					} else {
						out.Tasks = []string{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Tasks = append(out.Tasks, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels11(out *jwriter.Writer, in Pack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Tasks {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels12(in *jlexer.Lexer, out *NewGameRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "opponent":
			out.OpponentID = string(in.String())
		case "pack":
			out.Pack = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels12(out *jwriter.Writer, in NewGameRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"opponent\":"
		out.RawString(prefix[1:])
		out.String(string(in.OpponentID))
	}
	{
		const prefix string = ",\"pack\":"
		out.RawString(prefix)
		out.String(string(in.Pack))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewGameRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewGameRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels13(in *jlexer.Lexer, out *LoginCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels13(out *jwriter.Writer, in LoginCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels14(in *jlexer.Lexer, out *GameUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "userID":
			out.UserID = string(in.String())
		case "userNumbers":
			if in.IsNull() {
				in.Skip()
				out.Numbers = nil
			} else {
				in.Delim('[')
				if out.Numbers == nil {
					if !in.IsDelim(']') {
						out.Numbers = make([]int32, 0, 16)
					} else {
						out.Numbers = []int32{}
					}
				} else {
					out.Numbers = (out.Numbers)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int32
					v22 = int32(in.Int32())
					out.Numbers = append(out.Numbers, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels14(out *jwriter.Writer, in GameUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"userNumbers\":"
		out.RawString(prefix)
		if in.Numbers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Numbers {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels15(in *jlexer.Lexer, out *GameShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gameId":
			out.GameID = string(in.String())
		case "user1Id":
			out.User1Id = string(in.String())
		case "user2Id":
			out.User2Id = string(in.String())
		case "packId":
			out.PackId = string(in.String())
		case "status":
			out.Status = int32(in.Int32())
		case "user1Bingo":
			out.User1Bingo = int32(in.Int32())
		case "user2Bingo":
			out.User2Bingo = int32(in.Int32())
		case "winner":
			out.Winner = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels15(out *jwriter.Writer, in GameShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gameId\":"
		out.RawString(prefix[1:])
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"user1Id\":"
		out.RawString(prefix)
		out.String(string(in.User1Id))
	}
	{
		const prefix string = ",\"user2Id\":"
		out.RawString(prefix)
		out.String(string(in.User2Id))
	}
	{
		const prefix string = ",\"packId\":"
		out.RawString(prefix)
		out.String(string(in.PackId))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int32(int32(in.Status))
	}
	{
		const prefix string = ",\"user1Bingo\":"
		out.RawString(prefix)
		out.Int32(int32(in.User1Bingo))
	}
	{
		const prefix string = ",\"user2Bingo\":"
		out.RawString(prefix)
		out.Int32(int32(in.User2Bingo))
	}
	{
		const prefix string = ",\"winner\":"
		out.RawString(prefix)
		out.String(string(in.Winner))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels16(in *jlexer.Lexer, out *GameHub) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mu":
			easyjsonD2b7633eDecodeSync(in, &out.Mu)
		case "Rooms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Rooms = make(map[string]*Room)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 *Room
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Room)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					(out.Rooms)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels16(out *jwriter.Writer, in GameHub) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Mu\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeSync(out, in.Mu)
	}
	{
		const prefix string = ",\"Rooms\":"
		out.RawString(prefix)
		if in.Rooms == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Rooms {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if v26Value == nil {
					out.RawString("null")
				} else {
					(*v26Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameHub) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameHub) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels16(l, v)
}
func easyjsonD2b7633eDecodeSync(in *jlexer.Lexer, out *sync.Mutex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeSync(out *jwriter.Writer, in sync.Mutex) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels17(in *jlexer.Lexer, out *GameAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = string(in.String())
		case "finished":
			out.Finished = bool(in.Bool())
		case "numbers":
			if in.IsNull() {
				in.Skip()
				out.Numbers = nil
			} else {
				in.Delim('[')
				if out.Numbers == nil {
					if !in.IsDelim(']') {
						out.Numbers = make([]int32, 0, 16)
					} else {
						out.Numbers = []int32{}
					}
				} else {
					out.Numbers = (out.Numbers)[:0]
				}
				for !in.IsDelim(']') {
					var v27 int32
					v27 = int32(in.Int32())
					out.Numbers = append(out.Numbers, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels17(out *jwriter.Writer, in GameAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"finished\":"
		out.RawString(prefix)
		out.Bool(bool(in.Finished))
	}
	{
		const prefix string = ",\"numbers\":"
		out.RawString(prefix)
		if in.Numbers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Numbers {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v29))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels18(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gameID":
			out.GameID = string(in.String())
		case "user1ID":
			out.User1Id = string(in.String())
		case "user2ID":
			out.User2Id = string(in.String())
		case "packID":
			out.PackId = string(in.String())
		case "status":
			out.Status = int32(in.Int32())
		case "user1Bingo":
			out.User1Bingo = int32(in.Int32())
		case "user2Bingo":
			out.User2Bingo = int32(in.Int32())
		case "winner":
			out.Winner = string(in.String())
		case "numbers":
			if in.IsNull() {
				in.Skip()
				out.Numbers = nil
			} else {
				in.Delim('[')
				if out.Numbers == nil {
					if !in.IsDelim(']') {
						out.Numbers = make([]int32, 0, 16)
					} else {
						out.Numbers = []int32{}
					}
				} else {
					out.Numbers = (out.Numbers)[:0]
				}
				for !in.IsDelim(']') {
					var v30 int32
					v30 = int32(in.Int32())
					out.Numbers = append(out.Numbers, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user1Numbers":
			if in.IsNull() {
				in.Skip()
				out.User1Numbers = nil
			} else {
				in.Delim('[')
				if out.User1Numbers == nil {
					if !in.IsDelim(']') {
						out.User1Numbers = make([]int32, 0, 16)
					} else {
						out.User1Numbers = []int32{}
					}
				} else {
					out.User1Numbers = (out.User1Numbers)[:0]
				}
				for !in.IsDelim(']') {
					var v31 int32
					v31 = int32(in.Int32())
					out.User1Numbers = append(out.User1Numbers, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user2Numbers":
			if in.IsNull() {
				in.Skip()
				out.User2Numbers = nil
			} else {
				in.Delim('[')
				if out.User2Numbers == nil {
					if !in.IsDelim(']') {
						out.User2Numbers = make([]int32, 0, 16)
					} else {
						out.User2Numbers = []int32{}
					}
				} else {
					out.User2Numbers = (out.User2Numbers)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int32
					v32 = int32(in.Int32())
					out.User2Numbers = append(out.User2Numbers, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels18(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gameID\":"
		out.RawString(prefix[1:])
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"user1ID\":"
		out.RawString(prefix)
		out.String(string(in.User1Id))
	}
	{
		const prefix string = ",\"user2ID\":"
		out.RawString(prefix)
		out.String(string(in.User2Id))
	}
	{
		const prefix string = ",\"packID\":"
		out.RawString(prefix)
		out.String(string(in.PackId))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int32(int32(in.Status))
	}
	{
		const prefix string = ",\"user1Bingo\":"
		out.RawString(prefix)
		out.Int32(int32(in.User1Bingo))
	}
	{
		const prefix string = ",\"user2Bingo\":"
		out.RawString(prefix)
		out.Int32(int32(in.User2Bingo))
	}
	{
		const prefix string = ",\"winner\":"
		out.RawString(prefix)
		out.String(string(in.Winner))
	}
	{
		const prefix string = ",\"numbers\":"
		out.RawString(prefix)
		if in.Numbers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Numbers {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v34))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user1Numbers\":"
		out.RawString(prefix)
		if in.User1Numbers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.User1Numbers {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user2Numbers\":"
		out.RawString(prefix)
		if in.User2Numbers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.User2Numbers {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels19(in *jlexer.Lexer, out *FriendsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "wins":
			out.Wins = int(in.Int())
		case "loses":
			out.Loses = int(in.Int())
		case "friendsSince":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FriendsSince).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels19(out *jwriter.Writer, in FriendsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"wins\":"
		out.RawString(prefix)
		out.Int(int(in.Wins))
	}
	{
		const prefix string = ",\"loses\":"
		out.RawString(prefix)
		out.Int(int(in.Loses))
	}
	{
		const prefix string = ",\"friendsSince\":"
		out.RawString(prefix)
		out.Raw((in.FriendsSince).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FriendsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FriendsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels19(l, v)
}
func easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels20(in *jlexer.Lexer, out *FriendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person":
			out.Person = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels20(out *jwriter.Writer, in FriendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person\":"
		out.RawString(prefix[1:])
		out.String(string(in.Person))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FriendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDupreehkudaTaskBingoGameServiceInternalModels20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FriendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDupreehkudaTaskBingoGameServiceInternalModels20(l, v)
}
